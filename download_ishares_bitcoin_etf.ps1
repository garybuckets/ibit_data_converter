# PowerShell script to download iShares Bitcoin Trust ETF fund data and convert to XLSX
# Author: Generated by AI Assistant
# Date: $(Get-Date -Format "yyyy-MM-dd")

param(
    [string]$OutputPath = ".\ishares_bitcoin_etf.xlsx",
    [switch]$Force
)

# Function to write colored output
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# Function to check if Excel is available
function Test-ExcelAvailable {
    try {
        $excel = New-Object -ComObject Excel.Application
        $excel.Quit()
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
        return $true
    }
    catch {
        return $false
    }
}

# Function to convert XLS to XLSX
function Convert-XlsToXlsx {
    param(
        [string]$InputFile,
        [string]$OutputFile
    )
    
    try {
        Write-ColorOutput "Starting XLS to XLSX conversion..." "Yellow"
        
        # Create Excel COM object
        $excel = New-Object -ComObject Excel.Application
        $excel.Visible = $false
        $excel.DisplayAlerts = $false
        
        # Open the XLS file
        Write-ColorOutput "Opening XLS file..." "Cyan"
        $workbook = $excel.Workbooks.Open($InputFile)
        
        # Save as XLSX
        Write-ColorOutput "Saving as XLSX..." "Cyan"
        $workbook.SaveAs($OutputFile, 51) # 51 = xlOpenXMLWorkbook (without macro's in 2007-2016, *.xlsx)
        
        # Close workbook and quit Excel
        $workbook.Close($false)
        $excel.Quit()
        
        # Clean up COM objects
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbook) | Out-Null
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null
        [System.GC]::Collect()
        [System.GC]::WaitForPendingFinalizers()
        
        Write-ColorOutput "Conversion completed successfully!" "Green"
        return $true
    }
    catch {
        Write-ColorOutput "Error during conversion: $($_.Exception.Message)" "Red"
        return $false
    }
}

# Main script execution
try {
    Write-ColorOutput "=== iShares Bitcoin Trust ETF Data Downloader ===" "Magenta"
    Write-ColorOutput "Starting download process..." "White"
    
    # Check if output file already exists
    if (Test-Path $OutputPath) {
        if (-not $Force) {
            Write-ColorOutput "Output file already exists: $OutputPath" "Yellow"
            $response = Read-Host "Do you want to overwrite it? (y/N)"
            if ($response -ne "y" -and $response -ne "Y") {
                Write-ColorOutput "Operation cancelled by user." "Yellow"
                exit 0
            }
        }
        Remove-Item $OutputPath -Force
    }
    
    # Create temporary file for XLS download
    $tempXlsFile = [System.IO.Path]::GetTempFileName() + ".xls"
    
    # URL for the iShares Bitcoin Trust ETF fund data
    $url = "https://www.ishares.com/us/products/333011/fund/1521942788811.ajax?fileType=xls&fileName=iShares-Bitcoin-Trust-ETF_fund&dataType=fund"
    
    Write-ColorOutput "Downloading file from iShares..." "Cyan"
    Write-ColorOutput "URL: $url" "Gray"
    
    # Download the file
    try {
        $webClient = New-Object System.Net.WebClient
        $webClient.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
        $webClient.DownloadFile($url, $tempXlsFile)
        $webClient.Dispose()
        
        if (Test-Path $tempXlsFile) {
            $fileSize = (Get-Item $tempXlsFile).Length
            Write-ColorOutput "Download completed! File size: $([math]::Round($fileSize / 1KB, 2)) KB" "Green"
        } else {
            throw "Downloaded file not found"
        }
    }
    catch {
        Write-ColorOutput "Error downloading file: $($_.Exception.Message)" "Red"
        exit 1
    }
    
    # Check if Excel is available for conversion
    if (-not (Test-ExcelAvailable)) {
        Write-ColorOutput "Excel is not available on this system. Cannot convert XLS to XLSX." "Red"
        Write-ColorOutput "The XLS file has been downloaded to: $tempXlsFile" "Yellow"
        Write-ColorOutput "You can open it manually in Excel and save as XLSX." "Yellow"
        exit 1
    }
    
    # Convert XLS to XLSX
    $conversionSuccess = Convert-XlsToXlsx -InputFile $tempXlsFile -OutputFile $OutputPath
    
    if ($conversionSuccess) {
        Write-ColorOutput "=== Success! ===" "Green"
        Write-ColorOutput "File downloaded and converted successfully!" "Green"
        Write-ColorOutput "Output file: $OutputPath" "Cyan"
        
        # Show file information
        if (Test-Path $OutputPath) {
            $finalFileSize = (Get-Item $OutputPath).Length
            $finalFileDate = (Get-Item $OutputPath).LastWriteTime
            Write-ColorOutput "Final file size: $([math]::Round($finalFileSize / 1KB, 2)) KB" "White"
            Write-ColorOutput "Created: $finalFileDate" "White"
        }
    } else {
        Write-ColorOutput "Conversion failed, but XLS file is available at: $tempXlsFile" "Yellow"
        exit 1
    }
    
    # Clean up temporary file
    if (Test-Path $tempXlsFile) {
        Remove-Item $tempXlsFile -Force
        Write-ColorOutput "Temporary files cleaned up." "Gray"
    }
    
    Write-ColorOutput "=== Process completed successfully! ===" "Green"
}
catch {
    Write-ColorOutput "Unexpected error: $($_.Exception.Message)" "Red"
    Write-ColorOutput "Stack trace: $($_.ScriptStackTrace)" "Red"
    exit 1
}
finally {
    # Ensure cleanup happens even if there's an error
    if (Test-Path $tempXlsFile) {
        Remove-Item $tempXlsFile -Force -ErrorAction SilentlyContinue
    }
} 